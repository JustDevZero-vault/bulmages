/** \mainpage Manual básico de Doxygen

\author David Gutiérrez
\section introduccion Introducción
<a href="http://www.doxygen.org">Doxygen</a> es un sistema para la composición
de documentación a partir del código fuente de un programa...bueno, a primera vista. En realidad puede hacer mucho más que eso. También puede extraer  información sobre la estructura de las clases de un programa y presentarlo en un documento html estructurado. Este pequeño manual está escrito utilizando <a href="http://www.doxygen.org">Doxygen</a> , para ilustrar cómo funciona.
\arg \ref comofunciona
\arg \ref sintaxis
\arg \ref configuracion
\arg \ref comandos
*/


/**\page comofunciona Cómo funciona Doxygen
Básicamente, Doxygen funciona corriendo el ejecutable \c doxygen en el directorio fuente de nuestro proyecto, escaneará todos los archivos fuentes, según sus \ref configuracion y extrae los comentarios que hayamos puesto dentro del código.

Doxygen no extraerá cualquier comentario que tengamos puesto, sino los que tengan la \link sintaxis sintaxis \endlink reconocida por él
*/


/**\page configuracion Opciones de configuración

\c Doxygen lee su configuración del archivo \c Doxyfile, a menos que se le especifique otro. Para generar un fichero de configuración a modo de plantilla se puede 
ejecutar el comando \c doxygen \c -g que creará un fichero muy bonito y bien documentado.

Cuando se crea un proyecto con 
<a href="http://www.kdevelop.org">Kdevelop</a>,
también nos genera un fichero \c Doxyfile, aunque no tan bien 
documentado, y (por ahora) con un pequeño bug (el directorio de búsqueda se especifica de forma absoluta, de manera que al cambiarlo de directorio, \c Doxygen no funciona).

Algunas opciones interesantes que podemos encontrar en el fichero son:

\arg \c PROJECT_NAME Nombre del proyecto, vamos lo que sale en la primera página.
\arg \c EXTRACT_ALL Si se activa esta opción, todos los elementos del código aparecen en la documentación aunque no tengan ningún comentario. Útil para elaborar una lista de clases de manera estructurada, aunque puede ser muy lento de generar para proyectos grandes.
\arg \c EXTRACT_PRIVATE Si se activa esta opción, los miembros privados de una clase también aparecen dentro de la documentación (por defecto es NO)
\arg \c GENERATE_TODOLIST Comando MUY útil. Si está activado, genera una lista de tareas pendientes, que se introducen mediante el comando \c \\todo.
\arg \c GENERATE_BUGLIST Funciona exactamente igual que el anterior, pero para reportar bugs, que se introducen mediante el comando \c \\bug.
\arg \c INPUT El directorio raiz para procesar. Los ficheros generados con \c Kdevelop (por ahora) generan este campo con el directorio en forma absoluta, lo que puede dar error al moverlo.
\arg \c SOURCE_BROWSER Si está activada esta opción, introduce el código dentro de la documentación, diciendo por ejemplo, en qué línea está definida tal o cual variable.
\arg \c ALPHABETICAL_INDEX Si está activada, crea un índice alfabético con todos los elementos documentados.

Si quieres una lista completa con todas las opciones (pero en inglés), puede consultar la página del creador de \c Doxygen <a href="http://www.stack.nl/~dimitri/doxygen/config.html">aquí</a>.
*/

/**\page sintaxis Sintaxis de los comentarios
Los comentarios se incluyen utilizando la siguiente sintaxis, por ejemplo, para comentar la clase \c myclass
\verbinclude 1.cpp
pincha \link myclass aquí \endlink para ver cómo sale una vez procesado.

Quizá lo más lioso al principio de usar este programa es que hay mil maneras de hacer lo misma cosa. Por ejemplo, para introducir un comentario, las siguientes sintaxis también son reconocidas por Doxygen
\verbinclude 2.cpp


El bloque de comentario que describe cada parte del código (sea una clase, variable, o función) ha de ir justo antes de dicha porción de código, para que doxygen sea qué está generando. Esta regla se puede saltar, como ya he dicho, de muchas maneras, por ejemplo, mirad el siguiente trozo de código
\verbinclude 3.cpp
Debería funcionar, ¿no? Pulsa \link 3.cpp aquí \endlink para ver lo que sale.

¿Os dais cuenta? Las variables \c a,\c b, y \c c tienen los comentarios fuera de lugar. Ello es debido a que Doxygen supone que cada bloque de comentario, tenga la forma que tenga, está comentando al código que viene inmediatamente después. Esta regla se puede saltar de muchas maneras. La más sencilla es la que viene al final del ejemplo, añadiendo un símbolo \< después de los caracteres de comentario. Esto me indica que estoy comentando la porción de código que está inmediatamente antes.

La otra es usando algún comando especial (Doxygen tiene muchos, podéis mirar la lista completa <a href="http://www.stack.nl/~dimitri/doxygen/commands.html"> aquí </a>). Los comandos son \c \\fn, \c \\class, \c \\var, y sirven para especificar que el comentario que estoy escribiendo está describiendo tal o cual cosa. Por ejemplo,
en el siguiente trozo de código.



*/


/**\page comandos Algunos comandos útiles
La documentación que introduzcamos en el código para ser procesada por Doxygen admite la mayoría de los tags de HTML (la lista se encuentra 
<a href="http://www.stack.nl/~dimitri/doxygen/htmlcmds.html">aquí</a>), pero además podemos incluir algunos comandos propios de Doxygen. Los comandos son palabras que empiezan por \c \\ o por \c \@ (personalmente, prefiero el uso de \c \\ por ser más tradicionalmente usado como código de escape, y por muchos años usando \f$\mbox{\LaTeX}\f$).
 
 Podemos ver algunos con un ejemplo
\verbinclude 4.cpp
El resultado de procesar este fichero lo puedes ver \link coche aquí \endlink.

Veamos algunos comandos:

El comando \c \\class \<nombre\> especifica que estamos comentando la clase \c coche. En este caso no es necesario, ya que la clase coche es la porción de código inmediatamente después, pero si no lo fuera, se le puede indicar de esta manera. Así, podemos tener por ejemplo toda la documentación al final de los ficheros fuente y especificar qué trozo de código estamos comentando. Idéntico propósito tienen los comandos \c \\var (variables) \c \\fn (funciones) \c \\def (para \#defines), etc. Podéis ver al final del código cómo se usa el comando \c \\fn.

El comando \c \\brief \<texto\>, que ya ha aparecido antes, incluye todo el texto que venga después hasta la próxima línea en blanco, como una descripción breve de lo que estamos comentando.

El comando \c \\overload, para los que son muy vagos, cuando
estamos trabajando en \c C++, que es normal definir funciones sobrecargadas, este comando te escribe un mensajito diciendo que "Esta función está sobrecargada, bla,bla....".

El comando \c \\ref \<texto\>, bastante útil, sirve para hacer referencia a cualquier cosa que esté documentada. Creará un hiperenlace con el nombre del objeto a enlazar. 

El comando \c \\todo \<texto\>, sirve para especificar las tareas por hacer que quedan en el objeto que estamos comentando. Especialmente útil ya que \c Doxygen genera aparte una lista de tareas pendientes de todo el código fuente.

El comando \c \\bug \<texto\> funciona igual que el anterior, pero 
sirve para anotar bugs. También crea una lista aparte con los bugs del programa.

Si queremos insertar fórmulas matemáticas y sabemos algo de \f$\mbox{\LaTeX}\f$)


\arg \c \\c \c Fuente \c monoespaciada 
\arg \c \\b \b Fuente \b en \b negrita
\arg \c \\e \e Fuente \e en \e itálica

También podemos conseguir el mismo efecto usando código HTML, que recordemos, se puede insertar todo el que queramos como parte de los comentarios (se puede incluso insertar imágenes).

Si queremos insertar fórmulas matemáticas y sabemos algo de \f$\mbox{\LaTeX}\f$, podemos utilizar los comandos \c \\f$ <fórmula> \c \\f$, para presentar una fórmula dentro del párrafo, o \c \\f[ <fórmula> \c \\f] para presentarla en una línea aparte.

*/
