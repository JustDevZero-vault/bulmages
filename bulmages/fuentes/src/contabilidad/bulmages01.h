/***************************************************************************
                          bulmages01.h  -  description
                             -------------------
    begin                : Wed Nov 27 17:16:28 CET 2002
    copyright            : (C) 2002 by Tomeu Borras Riera
    email                : tborras@conetxia.com
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef BULMAGES01_H
#define BULMAGES01_H

#include <errno.h>

// include files for QT
#include <qvbox.h>
#include <qapplication.h>
#include <qmainwindow.h>
#include <qaction.h>
#include <qworkspace.h>
#include <qmenubar.h>
#include <qtoolbar.h>
#include <qstatusbar.h>
#include <qwhatsthis.h>
#include <qpopupmenu.h>
#include <qaccel.h>
#include <qtoolbutton.h>
#include <qmessagebox.h>
#include <qfiledialog.h>
#include <qprinter.h>
#include <qstring.h>
#include <qpixmap.h>

// include files de la aplicacion
#include "empresa.h"
#include "bbloqfecha.h"
#include "configuracion.h"
#include "bulmacontbase.h"

/**
  * This Class is the base class for your application. It sets up the main
  * window and providing a menubar, toolbar
  * and statusbar. For the main view, an instance of class Bulmages01View is
  * created which creates your view.
  * 
  * @author Source Framework Automatically Generated by KDevelop, (c) The KDevelop Team.
  * @version KDevelop version 1.3 code generation
  */
class Bulmages01 : public BulmaContBase    {
  Q_OBJECT
public:
    empresa empresaactual;  
    QDockWindow *doc;
public:
    Bulmages01(QWidget * parent = 0, const char * name = 0, WFlags f = WType_TopLevel, QString * DB=0);
    ~Bulmages01();

  protected:
    /** overloaded for Message box on last window exit */
   // bool queryExit();
    /** event filter to catch close events for MDI child windows and is installed in createClient() on every child window.
      * Closing a window calls the eventFilter first which removes the view from the connected documents' view list. If the
      * last view is going to be closed, the eventFilter() tests if the document is modified; if yes, it asks the user to
      * save the document. If the document title contains "Untitled", slotFileSaveAs() gets called to get a save name and path.
      */
    virtual bool eventFilter(QObject* object, QEvent* event);

  private slots:

    /** reverts the last editing action */
    void slotEditUndo();
    /** put the marked text/object into the clipboard and remove
     * it from the document */
    void slotEditCut();
    /** put the marked text/object into the clipboard*/
    void slotEditCopy();
    /** paste the clipboard into the document*/
    void slotEditPaste();
    /** Slot para mostrar el plan contable */
    void slotPlanCuentas();
    /** Slot para mostrar los listados de cuentas */
    void slotListadoCuentas();
    /** Slot para introducir apuntes */
    void slotIntroducirApuntes();
    void slotIntroducirApuntes1();
    /** Slot para listar apuntes */
    void slotListarApuntes();
    /** Slot para las propiedades de la empresa */
    void slotPropiedadesEmpresa();
    /** Slot para el libro mayor */
    void slotLibroMayor();
    void slotLibroDiario();
    void slotAsientos();
    void slotGruposContables();
    void slotPerdidas();
    void slot347();
    void slotBalan();
    void slotSiguiente();
    void slotAnterior();
    void slotUltimo();
    void slotPrimero();
    void slotGuardar();
    void slotImprimir();
    void slotReload();
    void slotRegistroIva();
    void slotAsientosInteligentes();
    void slotCentrosCoste();
    void slotCanales();
    void slotcierraEmpresa();
    void slotabreEmpresa();
    void slotregularizaEmpresa();
    void slotViewFullScreen(bool toggle);
    void slotBalance();
    void slotBalanceTree();
    void slotAyuda();
    void slotAbrirasientos();
    void slotOrdenarasientos();
    void slotFiltro();
    void slotMPatrimoniales();
    void slotCompBalance();
    void slotAmortizaciones();
    void slotBloqFechas();
    void slotSCuentas();
    void slotCCosteDef();
    void slotCanalDef();
    void slotRecSald();
    void slotCobPag();
    void slotTiposIVA();
    void slotFPago();
       

    /** toggle the toolbar*/
    void slotViewToolBar(bool toggle);
    /** toggle the statusbar*/
    void slotViewStatusBar(bool toggle);
    /** creates a new view for the current document */
    void slotWindowNewWindow();
    /** shows an about dlg*/
    void slotHelpAbout();
    /** change the status message of the whole statusbar temporary */
    void slotStatusHelpMsg(const QString &text);
    /** gets called when the window menu is activated; recreates the window menu with all opened window titles. */
    void windowMenuAboutToShow();    
    
  private:
    /// the name used
    QString DBName;
    /** initializes all QActions of the application */
    void initActions();
    /** initMenuBar creates the menu_bar and inserts the menuitems */
    void initMenuBar();
    /** this creates the toolbars. Change the toobar look and add new toolbars in this
     * function */
    void initToolBar();
    /** setup the statusbar */
    void initStatusBar();
    /** setup the mainview*/
    void initView();
    void showView();

    QVBox *view_back; 
    public:
	/// Para los plugins es interesante crear las funciones de acceso a los distintos elementos.
	QPopupMenu *pHerramientas() {return Herramientas;};
	QPopupMenu *pVerMenu() {return Ver;};
	QPopupMenu *pAyudaMenu() {return Ayuda;};

    private:
    /** pWorkspace is the MDI frame widget that handles MDI child widgets. Inititalized in
      * initView()
      */
    QWorkspace *pWorkspace;
    /** the printer instance */
    QPrinter *printer;
    /** a counter that gets increased each time the user creates a new document with "File"->"New" */
    int untitledCount;
};
#endif

