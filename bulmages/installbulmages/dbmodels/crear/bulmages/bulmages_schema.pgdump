

-- La tabla de configuración.
-- En esta tabla se guardan parametros que el programa va a utilizar. 
-- Como por ejemplo el numero de dígitos por defecto de las cuentas o el asiento inteligente que se enlaza con 
-- facturacion.
-- Tiene tres campos
-- idconfiguracion: el identificador (No tiene ningún uso especial).
-- nombre: El nombre del parametro de configuracion.
-- valor: El valor que toma dicho parametro.
CREATE TABLE configuracion (
    idconfiguracion integer NOT NULL,
    nombre character varying(25),
    valor character varying(350)
);


-- La tabla de tipos de iva indica los tipos de iva que se soportan
-- Sirve para saber si un iva determinado es correcto o no.
-- Esta en forma de tabla y no en otra forma debido a que los porcentajes de IVA podrian cambiar.
-- Los campos son:
-- idtipoiva: Identificador de la tabla.
-- nombretipoiva: da un nombre al tipo de iva.
-- Porcentajetipoiva: El porcentaje que corresponde con este tipo.
CREATE TABLE tiposiva (
    idtipoiva integer NOT NULL,
    nombretipoiva character varying(25),
    porcentajetipoiva character varying(350)
);


-- La tabla de grupos es una tabla constante.
-- No esta previsto que la base de datos pueda cambiar dicha tabla.
CREATE SEQUENCE grupo_idgrupo_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;

CREATE TABLE grupo (
    idgrupo integer DEFAULT nextval('"grupo_idgrupo_seq"'::text) NOT NULL,
    descripcion character varying(50)
);



-- La tabla cuenta es la que presenta el plan contable.
-- Principalmente define el arbol de cuentas, tiene varios campos de SOLO LECTURA que sirven para acumulados.
-- Los campos son:
-- idcuenta El identificador de la cuenta. Tipo Serial
-- codigo El codigo de la cuenta.
-- descripcion Descripcion de la cuenta
-- imputacion booleano que indica si la cuenta es de imputacion o no (aun no he descubierto para que sirve).
-- padre Este campo indica el idcuenta padre de la cuenta que tratamos. Es un apuntador al indice de la tabla lo que la convierte en arbol
-- bloqueada Este boleano indica si la cuenta esta bloqueada o no
-- idgrupo es el apuntador  a la tabla de grupos.
-- msg ?????
-- debe Este campo es de solo lectura e indica el acumulado en debe de la cuenta.
-- haber Este campo es de solo lectura e indica el acumulado en haber de la cuenta.
-- nodebe Este booleano indica si la cuenta puede tener inserciones en el debe o no.
-- nohaber Este booleano indica si la cuenta puede tener inserciones en el haber o no.
-- regularizacion Este booleano indica si la cuenta es de regularizacion o no.
-- activo: Este campo indica si la cuenta es de activo o de pasivo.
-- nombreent_cuenta: Si hay una entidad ligada a la cuenta aqui ponemos su nombre.
-- cifent_cuenta: Si hay una entidad ligada a la cuenta aqui ponemos su CIF
-- dirent_cuenta: Direccion de una entidad ligada con la cuenta
-- telent_cuenta: Telefono de una entidad ligada con la cuetna.
-- coment_cuenta: Comentarios de una entidad ligada con la cuenta.
-- bancoent_cuenta: Cuenta bancaria de una entidad ligada con la cuenta.
-- emailent_cuenta: Direccion de correo ligada con la entidad
-- webent_cuenta: Pagina web ligada con la entidad
-- tipocuenta: Campo de tipo integer que en realidad es un ENUM (para los valores que ahora no recuerdo y falta rellenar) ??????

CREATE SEQUENCE cuenta_idcuenta_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;

CREATE TABLE cuenta (
    idcuenta integer DEFAULT nextval('"cuenta_idcuenta_seq"'::text) NOT NULL,
    codigo character varying(12),
    descripcion character varying(100),
    imputacion boolean,
    padre integer,
    bloqueada boolean,
    idgrupo integer,
    msg character varying(500),
    debe double precision DEFAULT 0,
    haber double precision DEFAULT 0,
    nodebe boolean,
    nohaber boolean,
    regularizacion boolean,
    activo boolean,
    nombreent_cuenta character varying(50),
    cifent_cuenta character varying(12),
    dirent_cuenta character varying(80),
    telent_cuenta character varying(20),
    coment_cuenta character varying(500),
    bancoent_cuenta character varying(30),
    emailent_cuenta character varying(50),
    webent_cuenta character varying(70),
    tipocuenta integer
);


--
-- TOC entry 7 (OID 1345960)
-- Name: canal_idcanal_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE canal_idcanal_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 32 (OID 1345962)
-- Name: canal; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE canal (
    idcanal integer DEFAULT nextval('"canal_idcanal_seq"'::text) NOT NULL,
    descripcion character varying(100),
    nombre character varying(50)
);


--
-- TOC entry 8 (OID 1345965)
-- Name: c_coste_idc_coste_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE c_coste_idc_coste_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 33 (OID 1345967)
-- Name: c_coste; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE c_coste (
    idc_coste integer DEFAULT nextval('"c_coste_idc_coste_seq"'::text) NOT NULL,
    descripcion character varying(100),
    nombre character varying(50),
    codigo character(3),
    padre integer,
    imputacion boolean,
    debe double precision,
    haber double precision
);


--
-- TOC entry 9 (OID 1345970)
-- Name: acumulado_c_c_idacumulado_c_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE acumulado_c_c_idacumulado_c_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 34 (OID 1345972)
-- Name: acumulado_c_coste; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE acumulado_c_coste (
    idacumulado_c_coste integer DEFAULT nextval('"acumulado_c_c_idacumulado_c_seq"'::text) NOT NULL,
    idcuenta integer,
    idc_coste integer,
    debe double precision,
    haber double precision
);


--
-- TOC entry 10 (OID 1345975)
-- Name: acumulado_can_idacumulado_c_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE acumulado_can_idacumulado_c_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 35 (OID 1345977)
-- Name: acumulado_canal; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE acumulado_canal (
    idacumulado_canal integer DEFAULT nextval('"acumulado_can_idacumulado_c_seq"'::text) NOT NULL,
    idcuenta integer,
    idcanal integer,
    debe double precision,
    haber double precision
);


--
-- TOC entry 11 (OID 1345980)
-- Name: diario_iddiario_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE diario_iddiario_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 36 (OID 1345982)
-- Name: diario; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE diario (
    iddiario integer DEFAULT nextval('"diario_iddiario_seq"'::text) NOT NULL,
    descripcion character varying(100)
);


--
-- TOC entry 12 (OID 1345985)
-- Name: asiento_idasiento_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE asiento_idasiento_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 37 (OID 1345987)
-- Name: asiento; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE asiento (
    idasiento integer DEFAULT nextval('"asiento_idasiento_seq"'::text) NOT NULL,
    descripcion character varying(100),
    fecha timestamp with time zone,
    comentariosasiento character varying(2000),
    ordenasiento integer,
    clase smallint
);


--
-- TOC entry 13 (OID 1345993)
-- Name: apunte_idapunte_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE apunte_idapunte_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 38 (OID 1345995)
-- Name: apunte; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE apunte (
    idapunte integer DEFAULT nextval('"apunte_idapunte_seq"'::text) NOT NULL,
    codigoborrador integer,
    idasiento integer,
    iddiario integer,
    fecha timestamp with time zone,
    conceptocontable character varying(50),
    idcuenta integer,
    descripcion character varying(100),
    debe double precision,
    haber double precision,
    contrapartida integer,
    comentario character varying(100),
    idcanal integer,
    marcaconciliacion character(12),
    idc_coste integer,
    idtipoiva integer,
    orden integer,
    punteo boolean DEFAULT false
);


--
-- TOC entry 14 (OID 1345999)
-- Name: borrador_idborrador_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE borrador_idborrador_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 39 (OID 1346001)
-- Name: borrador; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE borrador (
    idborrador integer DEFAULT nextval('"borrador_idborrador_seq"'::text) NOT NULL,
    codigoborrador integer,
    idasiento integer,
    iddiario integer,
    fecha timestamp with time zone,
    conceptocontable character varying(50),
    idcuenta integer,
    descripcion character varying(100),
    debe double precision,
    haber double precision,
    contrapartida integer,
    comentario character varying(100),
    idcanal integer,
    marcaconciliacion character(12),
    idc_coste integer,
    idapunte integer,
    idtipoiva integer,
    orden integer
);


--
-- TOC entry 15 (OID 1346004)
-- Name: registroiva_idregistroiva_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE registroiva_idregistroiva_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 40 (OID 1346006)
-- Name: registroiva; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE registroiva (
    idregistroiva integer DEFAULT nextval('"registroiva_idregistroiva_seq"'::text) NOT NULL,
    contrapartida integer,
    baseimp double precision,
    iva double precision,
    factura character varying(70),
    idborrador integer,
    incregistro boolean,
    regularizacion boolean,
    plan349 boolean,
    numorden character varying(50),
    cif character varying(25)
);


--
-- TOC entry 16 (OID 1346009)
-- Name: ainteligente_idainteligente_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ainteligente_idainteligente_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 41 (OID 1346011)
-- Name: ainteligente; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ainteligente (
    idainteligente integer DEFAULT nextval('"ainteligente_idainteligente_seq"'::text) NOT NULL,
    descripcion character varying(100),
    comentariosasiento character varying(2000)
);


--
-- TOC entry 17 (OID 1346017)
-- Name: binteligente_idbinteligente_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE binteligente_idbinteligente_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- TOC entry 42 (OID 1346019)
-- Name: binteligente; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE binteligente (
    idbinteligente integer DEFAULT nextval('"borrador_idborrador_seq"'::text) NOT NULL,
    idainteligente integer,
    iddiario character varying(100),
    fecha character varying(100),
    conceptocontable character varying(100),
    codcuenta character varying(100),
    descripcion character varying(100),
    debe character varying(100),
    haber character varying(100),
    contrapartida character varying(100),
    comentario character varying(100),
    canal character varying(100),
    marcaconciliacion character varying(100),
    idc_coste character varying(100)
);


--
-- TOC entry 43 (OID 1346024)
-- Name: ivainteligente; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ivainteligente (
    idivainteligente serial NOT NULL,
    idainteligente integer,
    idbinteligente integer,
    contrapartida character varying(100),
    baseimp character varying(100),
    iva character varying(100),
    factura character varying(100),
    idborrador character varying(100),
    incregistro character varying(100),
    regularizacion character varying(100),
    plan349 character varying(100),
    numorden character varying(100),
    cif character varying(100)
);


--
-- TOC entry 44 (OID 1346029)
-- Name: compmasap; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE compmasap (
    idcompmasap serial NOT NULL,
    idcuenta integer,
    idmpatrimonial integer,
    masaperteneciente integer,
    saldo double precision,
    signo boolean,
    nombre character varying(150)
);


--
-- TOC entry 45 (OID 1346034)
-- Name: mpatrimonial; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE mpatrimonial (
    idmpatrimonial serial NOT NULL,
    idbalance integer,
    descmpatrimonial character varying(150),
    orden integer,
    tabulacion integer,
    saldo double precision,
    opdesc integer
);


--
-- TOC entry 46 (OID 1346039)
-- Name: compbalance; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE compbalance (
    idcompbalance serial NOT NULL,
    idbalance integer,
    idmpatrimonial integer,
    concepto character varying(150),
    orden integer,
    tabulacion integer
);


--
-- TOC entry 47 (OID 1346044)
-- Name: balance; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE balance (
    idbalance serial NOT NULL,
    nombrebalance character varying(150)
);


--
-- TOC entry 85 (OID 1346047)
-- Name: abreasientos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION abreasientos() RETURNS integer
    AS '
--DECLARE as RECORD;
--DECLARE res RECORD;
BEGIN
--    FOR as IN SELECT * FROM asiento ORDER BY idasiento DESC LOOP
--	SELECT INTO res cambiaasiento(as.idasiento, as.idasiento*3);
--    END LOOP;
--  Abrir los asientos es modificar el campo ordenasiento de los mismos para que se reorganicen
    UPDATE asiento SET ordenasiento= ordenasiento * 3;
    RETURN 0;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 86 (OID 1346048)
-- Name: cambiaasiento(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION cambiaasiento(integer, integer) RETURNS integer
    AS '
DECLARE
    idinicial ALIAS FOR $1;
    idfinal ALIAS FOR $2;
    as RECORD;
BEGIN
    -- Esta funcion cambia un asiento de sitio, el asiento inicial y lo pone en el asiento final
    -- El problema es que si el asiento final debe estar vacio
    SELECT INTO as * FROM asiento WHERE idasiento = idinicial;
    IF FOUND THEN
	INSERT INTO asiento (idasiento, fecha, descripcion, comentariosasiento) VALUES (idfinal, as.fecha, as.descripcion, as.comentariosasiento);
	UPDATE borrador SET idasiento = idfinal WHERE idasiento = idinicial;
	UPDATE apunte SET idasiento = idfinal WHERE idasiento = idinicial;
	DELETE FROM asiento WHERE idasiento = idinicial;
    END IF;
    RETURN 0;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 87 (OID 1346049)
-- Name: ccontrapartida(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ccontrapartida(integer) RETURNS integer
    AS '
DECLARE 
    midapunte ALIAS FOR $1;
    apt RECORD;
    aptasien RECORD;
BEGIN
    SELECT INTO apt * FROM apunte WHERE idapunte= midapunte;
    IF apt.contrapartida ISNULL THEN
	IF apt.debe = 0 THEN
	    SELECT INTO aptasien * FROM apunte WHERE idasiento = apt.idasiento AND debe <> 0 ORDER BY debe DESC;
	    IF FOUND THEN
		RETURN aptasien.idcuenta;
	    END IF;	    
	ELSE
	    SELECT INTO aptasien * FROM apunte WHERE idasiento = apt.idasiento AND haber <> 0 ORDER BY haber DESC;
	    IF FOUND THEN
		RETURN aptasien.idcuenta;
	    END IF;
	END IF;
    ELSE
	RETURN apt.contrapartida;
    END IF;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 88 (OID 1346050)
-- Name: bcontrapartida(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bcontrapartida(integer) RETURNS integer
    AS '
DECLARE
    midapunte ALIAS FOR $1;
    apt RECORD;
    aptasien RECORD;
    cont RECORD;
    descuadre FLOAT;
    apmaxdebe INTEGER;
    apmaxhaber INTEGER;
    maxdebe FLOAT;
    maxhaber FLOAT;
    salida BOOLEAN;
    salidadebe BOOLEAN;
    salidahaber BOOLEAN;
BEGIN
-- Dado un apunte nos retorna el apunte que ejerce de contrapartida. (no la cuenta si no el apunte).
-- Esta funcion puede variar con la funcion ccontrapartida ya que en ccontrapartida el calculo es distinto y puede ser erroneo.
-- Esta funcion esta mucho mas perfeccionada con lo que es menos probable un error. Por tanto se sugiere la migracion a esta nueva funcion
    RAISE NOTICE ''Em pezamos'';
    SELECT INTO apt * FROM apunte WHERE idapunte=midapunte;
    IF apt.contrapartida ISNULL THEN
	-- Inicializamos las variables.
	descuadre:=0;
	maxdebe :=0;
	maxhaber := 0;
	apmaxdebe:=0;
	apmaxhaber:=0;
	salida := FALSE;
	salidadebe := FALSE;
	salidahaber := FALSE;
	
	FOR  cont IN SELECT  * FROM apunte WHERE idasiento = apt.idasiento ORDER BY orden LOOP
	    -- Si es la cuenta que estamos buscando lo hacemos constar.
	    IF cont.idapunte = midapunte THEN
		salida := TRUE;
		IF cont.debe > 0 THEN
		    salidadebe := TRUE;
		ELSE
		    salidahaber := TRUE;
		END IF;
	    END IF;
	    -- Si es el debe maximo lo hacemos constar.
	    IF cont.debe > maxdebe THEN
		maxdebe := cont.debe;
		apmaxdebe := cont.idapunte;
	    END IF;
	    -- Si es el haber mximo lo hacemos constar
	    IF cont.haber > maxhaber THEN 
		maxhaber := cont.haber;
		apmaxhaber := cont.idapunte;
	    END IF;
	    -- Calculamos el descuadre
	    descuadre := descuadre + cont.debe;
	    descuadre := descuadre - cont.haber;
	    -- Si es el descuadre inicializamos las variables.
            
            
            
	    IF (descuadre < 0.001) THEN
		IF (salidadebe = TRUE) THEN
		    RETURN apmaxdebe;
		END IF;
		IF (salidahaber = TRUE) THEN
		    RETURN apmaxhaber;
		END IF;
		maxdebe := 0;
		maxhaber := 0;
		apmaxdebe:=0;
		apmaxhaber := 0;
		
	    END IF;
	END LOOP;
    ELSE
	SELECT INTO cont * FROM apunte WHERE idasiento = apt.idasiento AND idcuenta = apt.contrapartida;
	RETURN cont.idapunte;
    END IF;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 89 (OID 1346051)
-- Name: bcontrapartidaborr(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bcontrapartidaborr(integer) RETURNS integer
    AS '
DECLARE
    midapunte ALIAS FOR $1;
    apt RECORD;
    aptasien RECORD;
    cont RECORD;
    descuadre FLOAT;
    apmaxdebe INTEGER;
    apmaxhaber INTEGER;
    maxdebe FLOAT;
    maxhaber FLOAT;
    salida BOOLEAN;
    salidadebe BOOLEAN;
    salidahaber BOOLEAN;
BEGIN
-- Dado un apunte nos retorna el apunte que ejerce de contrapartida. (no la cuenta si no el apunte).
-- Esta funcion puede variar con la funcion ccontrapartida ya que en ccontrapartida el calculo es distinto y puede ser erroneo.
-- Esta funcion esta mucho mas perfeccionada con lo que es menos probable un error. Por tanto se sugiere la migracion a esta nueva funcion
    RAISE NOTICE ''Empezamos'';
    SELECT INTO apt * FROM borrador WHERE idborrador=midapunte;
    IF apt.contrapartida ISNULL THEN
	-- Inicializamos las variables.
	descuadre:=0;
	maxdebe :=0;
	maxhaber := 0;
	apmaxdebe:=0;
	apmaxhaber:=0;
	salida := FALSE;
	salidadebe := FALSE;
	salidahaber := FALSE;
	FOR  cont IN SELECT  * FROM borrador WHERE idasiento = apt.idasiento ORDER BY orden LOOP
	    -- Si es la cuenta que estamos buscando lo hacemos constar.
	    IF cont.idborrador = midapunte THEN
                RAISE NOTICE ''Este ciclo debemos salir'';
		salida := TRUE;
		IF cont.debe = 0 THEN
		    salidadebe := TRUE;
                    RAISE NOTICE ''Salida por debe %'', salidadebe;
		ELSE
		    salidahaber := TRUE;
                    RAISE NOTICE ''Salida por haber %'', salidahaber;
		END IF;
	    END IF;
	    -- Si es el debe maximo lo hacemos constar.
	    IF cont.debe > maxdebe THEN
		maxdebe := cont.debe;
		apmaxdebe := cont.idborrador;
                RAISE NOTICE ''Maxdebe: %, apmaxdebe: %'', maxdebe, apmaxdebe;
	    END IF;
	    -- Si es el haber mximo lo hacemos constar
	    IF cont.haber > maxhaber THEN 
		maxhaber := cont.haber;
		apmaxhaber := cont.idborrador;
                RAISE NOTICE ''Maxhaber: %, apmaxhaber: %'', maxhaber, apmaxhaber;                
	    END IF;
	    -- Calculamos el descuadre
	    descuadre := descuadre + cont.debe;
	    descuadre := descuadre - cont.haber;
	    -- Si es el descuadre inicializamos las variables.
           RAISE NOTICE ''Ciclo de iborrador %, debe %, haber %, descuadre %'', cont.idborrador, cont.debe, cont.haber, descuadre;            
	    IF (descuadre < 0.001) THEN
               RAISE NOTICE '' El descuadre es igual a cero'';
		IF (salidadebe) THEN
                   RAISE NOTICE '' Salida debe %'', apmaxdebe;
		    RETURN apmaxdebe;
		END IF;
		IF (salidahaber) THEN
                   RAISE NOTICE '' Salida haber %'', apmaxhaber;
		    RETURN apmaxhaber;
		END IF;
		maxdebe := 0;
		maxhaber := 0;
		apmaxdebe:=0;
		apmaxhaber := 0;
	    END IF;
	END LOOP;
    ELSE
	SELECT INTO cont * FROM borrador WHERE idasiento = apt.idasiento AND idcuenta = apt.contrapartida;
	RETURN cont.idapunte;
    END IF;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 90 (OID 1346052)
-- Name: id_cuenta(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION id_cuenta(character varying) RETURNS integer
    AS '
DECLARE
   codcuenta ALIAS FOR $1;
   cta  RECORD;
BEGIN
   SELECT INTO cta idcuenta FROM cuenta  WHERE codigo = "codcuenta";
   IF FOUND THEN
	RETURN cta.idcuenta;
   ELSE
	RETURN 0;
   END IF;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 91 (OID 1346053)
-- Name: nivel(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nivel(character varying) RETURNS integer
    AS '
DECLARE
    codcuenta ALIAS FOR $1;
BEGIN
    RETURN LENGTH(codcuenta);
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 92 (OID 1346054)
-- Name: saldototalmpatrimonial(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION saldototalmpatrimonial(integer) RETURNS double precision
    AS '
DECLARE
   identmpatrimonial ALIAS FOR $1;
   saldo DOUBLE PRECISION;
   rsaldo RECORD;
   rsaldo1 RECORD;
   smpatrimonialsum RECORD;
   smpatrimonialrest RECORD;
BEGIN
    saldo := 0;
    FOR rsaldo IN SELECT (sum(debe)-sum(haber)) AS total FROM cuenta WHERE idcuenta IN (SELECT  idcuenta FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idcuenta IS NOT NULL AND signo=true) LOOP
       IF (rsaldo.total IS NOT NULL) THEN
           saldo := saldo + rsaldo.total;
       END IF;
    END LOOP;
    FOR rsaldo1 IN SELECT (sum(debe)-sum(haber)) AS total FROM cuenta WHERE idcuenta IN (SELECT  idcuenta FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idcuenta IS NOT NULL AND signo=false) LOOP
       IF (rsaldo1.total IS NOT NULL) THEN
          saldo := saldo - rsaldo1.total;
       END IF;
    END LOOP;
    FOR smpatrimonialsum IN SELECT idmpatrimonial FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idmpatrimonial IS NOT NULL AND signo = true LOOP
	saldo := saldo + saldototalmpatrimonial (smpatrimonialsum.idmpatrimonial);
    END LOOP;
    FOR smpatrimonialrest IN SELECT idmpatrimonial FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idmpatrimonial IS NOT NULL AND signo = false LOOP
	saldo := saldo - saldototalmpatrimonial (smpatrimonialrest.idmpatrimonial);
    END LOOP;
    RETURN saldo;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 93 (OID 1346055)
-- Name: saldompatrimonial(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION saldompatrimonial(integer, timestamp without time zone, timestamp without time zone) RETURNS double precision
    AS '
DECLARE
    identmpatrimonial ALIAS FOR $1;
    fechain ALIAS FOR $2;
    fechafin ALIAS FOR $3;
    aptsum RECORD;
    aptrest RECORD;
    smpatrimonialsum RECORD;
    smpatrimonialres RECORD;
    saldo DOUBLE PRECISION;
BEGIN
    -- Esta funcion calcula el saldo de una masa patrimonial entre dos fechas.
    saldo := 0;
    FOR aptsum IN SELECT * FROM cuenta WHERE idcuenta IN (SELECT idcuenta FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idcuenta IS NOT NULL  AND signo = true) LOOP
	saldo := saldo + saldototal(aptsum.codigo, fechain, fechafin);
    END LOOP;
    FOR aptrest IN SELECT * FROM cuenta WHERE idcuenta IN (SELECT idcuenta FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idcuenta IS NOT NULL  AND signo = false) LOOP
	saldo := saldo - saldototal(aptsum.codigo, fechain, fechafin);
    END LOOP;
    FOR smpatrimonialsum IN SELECT * FROM mpatrimonial WHERE idmpatrimonial IN (SELECT idmpatrimonial FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idmpatrimonial IS NOT NULL AND signo = true) LOOP
	saldo := saldo + saldompatrimonial (smpatrimonialsum.idmpatrimonial, fechain, fechafin);
    END LOOP;
    FOR smpatrimonialsum IN SELECT * FROM mpatrimonial WHERE idmpatrimonial IN (SELECT idmpatrimonial FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idmpatrimonial IS NOT NULL AND signo = false) LOOP
	saldo := saldo - saldompatrimonial (smpatrimonialsum.idmpatrimonial, fechain, fechafin);
    END LOOP;
    RETURN saldo;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 94 (OID 1346056)
-- Name: debempatrimonial(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION debempatrimonial(integer, timestamp without time zone, timestamp without time zone) RETURNS double precision
    AS '
DECLARE
    identmpatrimonial ALIAS FOR $1;
    fechain ALIAS FOR $2;
    fechafin ALIAS FOR $3;
    aptsum RECORD;
    aptrest RECORD;
    smpatrimonialsum RECORD;
    smpatrimonialres RECORD;
    debe DOUBLE PRECISION;
BEGIN
    -- Esta funcion calcula el debe de una masa patrimonial entre dos fechas.
    debe := 0;
    FOR aptsum IN SELECT * FROM cuenta WHERE idcuenta IN (SELECT idcuenta FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idcuenta IS NOT NULL  AND signo = true) LOOP
	debe := debe + debetotal(aptsum.idcuenta, fechain, fechafin);
    END LOOP;
    FOR aptrest IN SELECT * FROM cuenta WHERE idcuenta IN (SELECT idcuenta FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idcuenta IS NOT NULL  AND signo = false) LOOP
	debe := debe - debetotal(aptsum.idcuenta, fechain, fechafin);
    END LOOP;
    FOR smpatrimonialsum IN SELECT * FROM mpatrimonial WHERE idmpatrimonial IN (SELECT idmpatrimonial FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idmpatrimonial IS NOT NULL AND signo = true) LOOP
	debe := debe + debempatrimonial (smpatrimonialsum.idmpatrimonial, fechain, fechafin);
    END LOOP;
    FOR smpatrimonialsum IN SELECT * FROM mpatrimonial WHERE idmpatrimonial IN (SELECT idmpatrimonial FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idmpatrimonial IS NOT NULL AND signo = false) LOOP
	debe := debe - debepatrimonial (smpatrimonialsum.idmpatrimonial, fechain, fechafin);
    END LOOP;
    RETURN debe;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 95 (OID 1346057)
-- Name: habermpatrimonial(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION habermpatrimonial(integer, timestamp without time zone, timestamp without time zone) RETURNS double precision
    AS '
DECLARE
    identmpatrimonial ALIAS FOR $1;
    fechain ALIAS FOR $2;
    fechafin ALIAS FOR $3;
    aptsum RECORD;
    aptrest RECORD;
    smpatrimonialsum RECORD;
    smpatrimonialres RECORD;
    haber DOUBLE PRECISION;
BEGIN
    -- Esta funcion calcula el saldo de una masa patrimonial entre dos fechas.
    haber := 0;
    FOR aptsum IN SELECT * FROM cuenta WHERE idcuenta IN (SELECT idcuenta FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idcuenta IS NOT NULL  AND signo = true) LOOP
	haber := haber + habertotal(aptsum.idcuenta, fechain, fechafin);
    END LOOP;
    FOR aptrest IN SELECT * FROM cuenta WHERE idcuenta IN (SELECT idcuenta FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idcuenta IS NOT NULL  AND signo = false) LOOP
	haber := haber - habertotal(aptsum.idcuenta, fechain, fechafin);
    END LOOP;
    FOR smpatrimonialsum IN SELECT * FROM mpatrimonial WHERE idmpatrimonial IN (SELECT idmpatrimonial FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idmpatrimonial IS NOT NULL AND signo = true) LOOP
	haber := haber + habermpatrimonial (smpatrimonialsum.idmpatrimonial, fechain, fechafin);
    END LOOP;
    FOR smpatrimonialsum IN SELECT * FROM mpatrimonial WHERE idmpatrimonial IN (SELECT idmpatrimonial FROM compmasap WHERE masaperteneciente = identmpatrimonial AND idmpatrimonial IS NOT NULL AND signo = false) LOOP
	haber := haber - habermpatrimonial (smpatrimonialsum.idmpatrimonial, fechain, fechafin);
    END LOOP;
    RETURN haber;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 96 (OID 1346058)
-- Name: saldototal(character varying, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION saldototal(character varying, timestamp without time zone, timestamp without time zone) RETURNS double precision
    AS '
DECLARE
    codcuenta ALIAS FOR $1;
    fechain ALIAS FOR $2;
    fechafin ALIAS FOR $3;
    apt RECORD;
    apt1 RECORD;
    apt2 RECORD;
	 cta RECORD;
    saldo DOUBLE PRECISION;
BEGIN
--    SELECT INTO apt * FROM apunte WHERE id_cuenta(codcuenta) = apunte.idcuenta;
	 SELECT INTO cta * FROM  cuenta WHERE codigo = codcuenta;
    SELECT INTO apt sum(debe) AS tdebe, sum(haber) AS thaber FROM apunte WHERE apunte.idcuenta = id_cuenta(codcuenta) AND fecha <= "fechafin" AND fecha >= "fechain";
    IF (apt.tdebe ISNULL) THEN
	saldo := 0;
    ELSE
	saldo := apt.tdebe - apt.thaber;
    END IF;
--    RAISE NOTICE '' saldo total % valor adquirido %'', codcuenta, saldo;
    FOR apt1 IN SELECT codigo FROM cuenta WHERE padre = id_cuenta(codcuenta) LOOP
	saldo := saldo + saldototal(apt1.codigo,fechain, fechafin);
    END LOOP;
    RETURN saldo;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 97 (OID 1346059)
-- Name: debetotal(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION debetotal(integer, timestamp without time zone, timestamp without time zone) RETURNS double precision
    AS '
DECLARE
    mcuenta ALIAS FOR $1;
    fechain ALIAS FOR $2;
    fechafin ALIAS FOR $3;
    apt RECORD;
    apt1 RECORD;
    apt2 RECORD;
	 cta RECORD;
    debet DOUBLE PRECISION;
BEGIN
--    SELECT INTO apt * FROM apunte WHERE cuenta = apunte.idcuenta;
--    RAISE NOTICE '' Calculando debetotal de % entre % y % '', cuenta, fechain, fechafin;
    debet := 0;
	 SELECT INTO apt sum(debe) AS mdebe FROM apunte WHERE apunte.idcuenta = mcuenta AND fecha <= "fechafin" AND fecha >= "fechain";
	 if (apt.mdebe ISNULL) THEN
	 	debet:= 0;
	 ELSE
		debet := apt.mdebe;
	END IF;
--    RAISE NOTICE '' debe total % valor adquirido %'', cuenta, debet;
    FOR apt1 IN SELECT idcuenta FROM cuenta WHERE padre = mcuenta LOOP
	debet := debet + debetotal(apt1.idcuenta,fechain, fechafin);
    END LOOP;
    RETURN debet;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 98 (OID 1346060)
-- Name: debetotal1(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION debetotal1(integer) RETURNS double precision
    AS '
DECLARE
    mcuenta ALIAS FOR $1;
    apt RECORD;
    apt1 RECORD;
    apt2 RECORD;
	 cta RECORD;
    debet DOUBLE PRECISION;
BEGIN
--    SELECT INTO apt * FROM apunte WHERE id_cuenta(codcuenta) = apunte.idcuenta;
    debet := 0;
	 SELECT INTO apt sum(debe) AS mdebe FROM apunte WHERE apunte.idcuenta = mcuenta;
	 if (apt.mdebe ISNULL) THEN
	 	debet:= 0;
	 ELSE
		debet := apt.mdebe;
	END IF;
--    RAISE NOTICE '' debe total1 % valor adquirido %'', codcuenta, debet;
    FOR apt1 IN SELECT idcuenta FROM cuenta WHERE padre = mcuenta LOOP
	debet := debet + debetotal1(apt1.idcuenta);
    END LOOP;
    RETURN debet;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 99 (OID 1346061)
-- Name: habertotal(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION habertotal(integer, timestamp without time zone, timestamp without time zone) RETURNS double precision
    AS '
DECLARE
    mcuenta ALIAS FOR $1;
    fechain ALIAS FOR $2;
    fechafin ALIAS FOR $3;
    apt RECORD;
    apt1 RECORD;
    apt2 RECORD;
	 cta RECORD;
    habert DOUBLE PRECISION;
BEGIN
--    SELECT INTO apt * FROM apunte WHERE id_cuenta(codcuenta) = apunte.idcuenta;
	habert := 0;
    SELECT INTO apt sum(haber) AS thaber FROM apunte WHERE apunte.idcuenta = mcuenta AND fecha <= "fechafin" AND fecha >= "fechain";
	 IF (apt.thaber ISNULL) THEN
	 	habert := 0;
	ELSE
		habert := apt.thaber;
	END IF;
--    RAISE NOTICE '' haber total % valor adquirido %'', codcuenta, habert;
    FOR apt1 IN SELECT idcuenta FROM cuenta WHERE padre = mcuenta LOOP
		habert := habert + habertotal(apt1.idcuenta,fechain, fechafin);
    END LOOP;
    RETURN habert;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 100 (OID 1346062)
-- Name: habertotal1(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION habertotal1(integer) RETURNS double precision
    AS '
DECLARE
    mcuenta ALIAS FOR $1;
    apt RECORD;
    apt1 RECORD;
    apt2 RECORD;
	 cta RECORD;
    habert DOUBLE PRECISION;
BEGIN
--    SELECT INTO apt * FROM apunte WHERE id_cuenta(codcuenta) = apunte.idcuenta;
	habert := 0;
    SELECT INTO apt sum(haber) AS thaber FROM apunte WHERE apunte.idcuenta = mcuenta;
	 IF (apt.thaber ISNULL) THEN
	 	habert := 0;
	ELSE
		habert := apt.thaber;
	END IF;
--    RAISE NOTICE '' haber total % valor adquirido %'', codcuenta, habert;
    FOR apt1 IN SELECT idcuenta FROM cuenta WHERE padre = mcuenta LOOP
		habert := habert + habertotal1(apt1.idcuenta);
    END LOOP;
    RETURN habert;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 101 (OID 1346063)
-- Name: recalculasaldos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION recalculasaldos() RETURNS double precision
    AS '
DECLARE
    cta RECORD;
BEGIN
-- El orden si es importante ya que aparecen problemas con el trigger. que se dispara en los updates.
    FOR cta IN SELECT * FROM cuenta WHERE padre IS NOT NULL ORDER BY padre LOOP
   	UPDATE cuenta SET debe = debetotal1(cta.idcuenta), haber=habertotal1(cta.idcuenta) WHERE idcuenta = cta.idcuenta;
    END LOOP;
    FOR cta IN SELECT * FROM cuenta WHERE padre IS NULL ORDER BY padre LOOP
   	UPDATE cuenta SET debe = debetotal1(cta.idcuenta), haber=habertotal1(cta.idcuenta) WHERE idcuenta = cta.idcuenta;
    END LOOP;
    RETURN 0;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 102 (OID 1346064)
-- Name: aumenta_valor(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION aumenta_valor() RETURNS "trigger"
    AS '
DECLARE
   cta    int4;
   ccost  int4;
   ctar   RECORD;
   ccostr RECORD;
BEGIN
        UPDATE cuenta SET debe = debe + NEW.debe, haber = haber + NEW.haber WHERE idcuenta = NEW.idcuenta;
        UPDATE c_coste SET debe = debe + NEW.debe, haber = haber + NEW.haber WHERE idc_coste = NEW.idc_coste;
        IF NEW.idcuenta IS NOT NULL THEN
           UPDATE acumulado_canal SET debe= debe + NEW.debe, haber = haber + NEW.haber WHERE idcuenta = NEW.idcuenta AND 
idcanal = NEW.idcanal;
        END IF;
        cta := NEW.idcuenta;
        ccost := NEW.idc_coste;
--        RAISE NOTICE '' Se ha lanzado la funcion aumenta_valor()'';
        SELECT INTO ccostr * FROM c_coste WHERE idc_coste = ccost;
        WHILE FOUND LOOP
           SELECT INTO ctar * FROM cuenta WHERE idcuenta = cta;
           WHILE FOUND LOOP
--                RAISE NOTICE '' Cuenta % Centro Coste %'', ctar.idcuenta, ccostr.idc_coste;
         	UPDATE acumulado_c_coste SET debe = debe + NEW.debe, haber = haber + NEW.haber WHERE idc_coste = 
ccostr.idc_coste AND idcuenta = ctar.idcuenta;
	      SELECT INTO ctar * FROM cuenta WHERE idcuenta = ctar.padre;
           END LOOP;
           SELECT INTO ccostr * FROM c_coste WHERE idc_coste = ccostr.padre;
        END LOOP;
        RETURN NEW;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 103 (OID 1346065)
-- Name: disminuye_valor(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disminuye_valor() RETURNS "trigger"
    AS '
DECLARE
   cta    int4;
   ccost  int4;
   ctar   RECORD;
   ccostr RECORD;
BEGIN
--	RAISE NOTICE ''disminuye_valor: debe antiguo %, debe nuevo %'', OLD.debe, NEW.debe;
	
        UPDATE cuenta SET debe = debe - OLD.debe, haber = haber - OLD.haber WHERE idcuenta = OLD.idcuenta;
        UPDATE c_coste SET debe = debe - OLD.debe, haber = haber - OLD.haber WHERE idc_coste = OLD.idc_coste;
        IF OLD.idcuenta IS NOT NULL THEN
           UPDATE acumulado_canal SET debe= debe - OLD.debe, haber =haber - OLD.haber WHERE idcuenta = OLD.idcuenta AND 
idcanal = OLD.idcanal;
        END IF;
	cta := OLD.idcuenta;
	ccost := OLD.idc_coste;
--	RAISE NOTICE '' Se ha lanzado la funcion disminuye_valor()'';
	SELECT INTO ccostr * FROM c_coste WHERE idc_coste = ccost;
	WHILE FOUND LOOP
	   SELECT INTO ctar * FROM cuenta WHERE idcuenta = cta;
	   WHILE FOUND LOOP
--	      RAISE NOTICE '' Cuenta % Centro Coste %'', ctar.idcuenta, ccostr.idc_coste;
	      UPDATE acumulado_c_coste SET debe = debe - OLD.debe, haber = haber -OLD.haber WHERE idc_coste = ccostr.idc_coste 
AND idcuenta = ctar.idcuenta;
	      SELECT INTO ctar * FROM cuenta WHERE idcuenta = ctar.padre;
	    END LOOP;
	    SELECT INTO ccostr * FROM c_coste WHERE idc_coste = ccostr.padre;
	END LOOP;
--	RAISE NOTICE '' disminuye_valor: Finaliza el algoritmo. ''; 
	RETURN NEW;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 104 (OID 1346066)
-- Name: disminuye_valor1(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disminuye_valor1() RETURNS "trigger"
    AS '
DECLARE
   cta    int4;
   ccost  int4;
   ctar   RECORD;
   ccostr RECORD;
BEGIN
	
        UPDATE cuenta SET debe = debe - OLD.debe, haber = haber - OLD.haber WHERE idcuenta = OLD.idcuenta;
        UPDATE c_coste SET debe = debe - OLD.debe, haber = haber - OLD.haber WHERE idc_coste = OLD.idc_coste;
        IF OLD.idcuenta IS NOT NULL THEN
           UPDATE acumulado_canal SET debe= debe - OLD.debe, haber =haber - OLD.haber WHERE idcuenta = OLD.idcuenta AND 
idcanal = OLD.idcanal;
        END IF;
	cta := OLD.idcuenta;
	ccost := OLD.idc_coste;
--	RAISE NOTICE '' Se ha lanzado la funcion disminuye_valor()'';
	SELECT INTO ccostr * FROM c_coste WHERE idc_coste = ccost;
	WHILE FOUND LOOP
	   SELECT INTO ctar * FROM cuenta WHERE idcuenta = cta;
	   WHILE FOUND LOOP
--	      RAISE NOTICE '' Cuenta % Centro Coste %'', ctar.idcuenta, ccostr.idc_coste;
	      UPDATE acumulado_c_coste SET debe = debe - OLD.debe, haber = haber -OLD.haber WHERE idc_coste = ccostr.idc_coste 
AND idcuenta = ctar.idcuenta;
	      SELECT INTO ctar * FROM cuenta WHERE idcuenta = ctar.padre;
	    END LOOP;
	    SELECT INTO ccostr * FROM c_coste WHERE idc_coste = ccostr.padre;
	END LOOP;
--	RAISE NOTICE '' disminuye_valor: Finaliza el algoritmo. ''; 
	RETURN OLD;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 105 (OID 1346067)
-- Name: creacuenta(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION creacuenta() RETURNS "trigger"
    AS '
DECLARE
   mrecord RECORD;
BEGIN            
      FOR mrecord IN SELECT * FROM canal LOOP
         INSERT INTO acumulado_canal (idcuenta, idcanal,debe,haber) VALUES(NEW.idcuenta, mrecord.idcanal,0,0);
      END LOOP;
      FOR mrecord IN SELECT * FROM c_coste LOOP
         INSERT INTO acumulado_c_coste (idcuenta, idc_coste,debe,haber) VALUES(NEW.idcuenta, mrecord.idc_coste,0,0);
      END LOOP;
        RETURN NEW;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 106 (OID 1346068)
-- Name: borracuenta(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION borracuenta() RETURNS "trigger"
    AS '
DECLARE
   mrecord RECORD;
BEGIN            
      FOR mrecord IN SELECT * FROM canal LOOP
        DELETE FROM acumulado_canal WHERE idcuenta = OLD.idcuenta;
      END LOOP;
      FOR mrecord IN SELECT * FROM c_coste LOOP
         DELETE FROM acumulado_c_coste WHERE idcuenta=OLD.idcuenta;
      END LOOP;
        RETURN OLD;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 107 (OID 1346069)
-- Name: creacanal(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION creacanal() RETURNS "trigger"
    AS '
DECLARE
   mrecord RECORD;
BEGIN            
      FOR mrecord IN SELECT * FROM cuenta LOOP
         INSERT INTO acumulado_canal (idcuenta, idcanal,debe,haber) VALUES(mrecord.idcuenta, NEW.idcanal,0,0);
      END LOOP;
        RETURN NEW;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 108 (OID 1346070)
-- Name: borracanal(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION borracanal() RETURNS "trigger"
    AS '
BEGIN
    DELETE FROM acumulado_canal WHERE idcanal = OLD.idcanal;
    RETURN OLD;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 109 (OID 1346071)
-- Name: creaccoste(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION creaccoste() RETURNS "trigger"
    AS '
DECLARE
   mrecord RECORD;
BEGIN            
      FOR mrecord IN SELECT * FROM cuenta LOOP
         INSERT INTO acumulado_c_coste (idcuenta, idc_coste,debe,haber) VALUES(mrecord.idcuenta, NEW.idc_coste,0,0);
      END LOOP;
        RETURN NEW;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 110 (OID 1346072)
-- Name: borraccoste(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION borraccoste() RETURNS "trigger"
    AS '
BEGIN
    DELETE FROM acumulado_c_coste WHERE idc_coste = OLD.idc_coste;
    RETURN OLD;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 111 (OID 1346073)
-- Name: propagaacumuladocuenta(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION propagaacumuladocuenta() RETURNS "trigger"
    AS '
DECLARE
   incdebe FLOAT8;
   inchaber FLOAT8;
BEGIN
   incdebe = NEW.debe - OLD.debe;
   inchaber = NEW.haber - OLD.haber;
--   RAISE NOTICE ''propagaacumuladocuenta %'', NEW.codigo;
   IF incdebe <> 0 OR inchaber <> 0 THEN
	   UPDATE cuenta SET debe = debe + incdebe, haber = haber + inchaber WHERE idcuenta = NEW.padre;
   END IF;
   RETURN NEW;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 112 (OID 1346074)
-- Name: propagaacumuladoccoste(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION propagaacumuladoccoste() RETURNS "trigger"
    AS '
DECLARE
   incdebe FLOAT8;
   inchaber FLOAT8;
BEGIN
   incdebe = NEW.debe - OLD.debe;
   inchaber = NEW.haber - OLD.haber;
   IF incdebe <> 0 OR inchaber <> 0 THEN
	   UPDATE c_coste SET debe = debe + incdebe, haber = haber + inchaber WHERE idc_coste = OLD.padre;
   END IF;
   RETURN NEW;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 113 (OID 1346075)
-- Name: acumulados_canal(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acumulados_canal() RETURNS "trigger"
    AS '
DECLARE
   incdebe  FLOAT8;
   inchaber FLOAT8;
   cuentar  RECORD;
BEGIN
--   RAISE NOTICE '' Ha entrado el trigger acumulados_canal() '';
--   RAISE NOTICE '' idcuenta % idcanal %'', NEW.idcuenta, NEW.idcanal;
   incdebe = NEW.debe - OLD.debe;
   inchaber = NEW.haber - OLD.haber;
   SELECT INTO cuentar * FROM cuenta WHERE idcuenta = NEW.idcuenta;
   SELECT INTO cuentar * FROM cuenta WHERE idcuenta = cuentar.padre;
   IF FOUND THEN
      UPDATE acumulado_canal SET debe = debe + incdebe, haber = haber + inchaber WHERE idcuenta = cuentar.idcuenta AND idcanal 
= NEW.idcanal;
   END IF;
   RETURN NEW;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 48 (OID 1346076)
-- Name: pga_graphs; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pga_graphs (
    graphname character varying(64) NOT NULL,
    graphsource text,
    graphcode text
);


--
-- TOC entry 49 (OID 1346076)
-- Name: pga_graphs; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pga_graphs FROM PUBLIC;
GRANT ALL ON TABLE pga_graphs TO PUBLIC;


--
-- TOC entry 50 (OID 1346081)
-- Name: pga_images; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pga_images (
    imagename character varying(64) NOT NULL,
    imagesource text
);


--
-- TOC entry 51 (OID 1346081)
-- Name: pga_images; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pga_images FROM PUBLIC;
GRANT ALL ON TABLE pga_images TO PUBLIC;


--
-- TOC entry 52 (OID 1346086)
-- Name: pga_diagrams; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pga_diagrams (
    diagramname character varying(64) NOT NULL,
    diagramtables text,
    diagramlinks text
);


--
-- TOC entry 53 (OID 1346086)
-- Name: pga_diagrams; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pga_diagrams FROM PUBLIC;
GRANT ALL ON TABLE pga_diagrams TO PUBLIC;


--
-- TOC entry 54 (OID 1346091)
-- Name: pga_layout; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pga_layout (
    tablename character varying(64) NOT NULL,
    nrcols smallint,
    colnames text,
    colwidth text
);


--
-- TOC entry 55 (OID 1346091)
-- Name: pga_layout; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pga_layout FROM PUBLIC;
GRANT ALL ON TABLE pga_layout TO PUBLIC;


--
-- TOC entry 114 (OID 1346096)
-- Name: abreasiento(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION abreasiento(integer) RETURNS integer
    AS 'DECLARE
	id_asiento ALIAS FOR $1;
BEGIN
	DELETE FROM apunte WHERE idasiento=id_asiento;
	RETURN 1;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 115 (OID 1346097)
-- Name: cierraasiento(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION cierraasiento(integer) RETURNS integer
    AS 'DECLARE
	id_asiento ALIAS FOR $1;
	mrecord RECORD;
BEGIN
	DELETE FROM apunte WHERE idasiento=id_asiento;
	 -- // Linia Afegida per Josep B.

	FOR mrecord IN SELECT * from borrador WHERE idasiento=id_asiento LOOP
		INSERT INTO apunte (codigoborrador, idasiento, iddiario, fecha, conceptocontable, idcuenta, descripcion, debe, 
haber, contrapartida, comentario, idcanal, marcaconciliacion, idc_coste, idtipoiva, orden) VALUES (mrecord.codigoborrador, 
mrecord.idasiento, mrecord.iddiario, mrecord.fecha, mrecord.conceptocontable, mrecord.idcuenta, mrecord.descripcion, 
mrecord.debe, mrecord.haber, mrecord.contrapartida, mrecord.comentario, mrecord.idcanal, mrecord.marcaconciliacion, 
mrecord.idc_coste, mrecord.idtipoiva, mrecord.orden);		
	END LOOP;
	
	-- Cuando cerramos el asiento, tambien recalculamos todas las contrapartidas.
	-- Si hay una contrapartida puesta en el borrador, entonces esa no se tocara.
	UPDATE apunte set contrapartida = ccontrapartida(idapunte) WHERE idasiento= id_asiento;
	RETURN 1;
END;

'
    LANGUAGE plpgsql;


--
-- TOC entry 56 (OID 1346100)
-- Name: amortizacion; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE amortizacion (
    idamortizacion serial NOT NULL,
    idcuentaactivo integer,
    idcuentaamortizacion integer,
    descamortizacion character varying(2000),
    nomamortizacion character varying(200),
    fechacompra date,
    fecha1cuota date,
    valorcompra double precision,
    periodicidad integer,
    numcuotas integer,
    metodo integer,
    nifproveedor character varying(12),
    nomproveedor character varying(150),
    dirproveedor character varying(200),
    telproveedor character varying(20),
    agrupacion character varying(150)
);


--
-- TOC entry 57 (OID 1346108)
-- Name: linamortizacion; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE linamortizacion (
    idlinamortizacion serial NOT NULL,
    idamortizacion integer,
    idasiento integer,
    ejercicio integer,
    fechaprevista date,
    cantidad double precision
);


--
-- TOC entry 58 (OID 1346111)
-- Name: ejercicios; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ejercicios (
    ejercicio integer,
    periodo smallint,
    bloqueado boolean
);


--
-- TOC entry 116 (OID 1346113)
-- Name: reordenaasientos(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reordenaasientos(integer) RETURNS integer
    AS '
DECLARE
    ejercicio ALIAS FOR $1;
    as RECORD;
    cont integer;
BEGIN
    cont := 1;
    FOR as IN SELECT * from asiento WHERE EXTRACT(YEAR FROM fecha)=ejercicio ORDER BY fecha,clase,ordenasiento LOOP
	IF (cont <> as.ordenasiento) THEN
	    UPDATE asiento SET ordenasiento = cont WHERE idasiento = as.idasiento;
	END IF;
	cont := cont + 1;
    END LOOP;
    RETURN 0;
END;
'
    LANGUAGE plpgsql;


--
-- TOC entry 61 (OID 1358577)
-- Name: grupo_idgrupo_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX grupo_idgrupo_key ON grupo USING btree (idgrupo);


--
-- TOC entry 75 (OID 1358578)
-- Name: compbalance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY compbalance
    ADD CONSTRAINT compbalance_pkey PRIMARY KEY (idcompbalance);


--
-- TOC entry 76 (OID 1358580)
-- Name: balance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY balance
    ADD CONSTRAINT balance_pkey PRIMARY KEY (idbalance);


--
-- TOC entry 74 (OID 1358582)
-- Name: ivainteligente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ivainteligente
    ADD CONSTRAINT ivainteligente_pkey PRIMARY KEY (idivainteligente);


--
-- TOC entry 72 (OID 1358584)
-- Name: ainteligente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ainteligente
    ADD CONSTRAINT ainteligente_pkey PRIMARY KEY (idainteligente);


--
-- TOC entry 73 (OID 1358586)
-- Name: binteligente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY binteligente
    ADD CONSTRAINT binteligente_pkey PRIMARY KEY (idbinteligente);


--
-- TOC entry 59 (OID 1358588)
-- Name: configuracion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY configuracion
    ADD CONSTRAINT configuracion_pkey PRIMARY KEY (idconfiguracion);


--
-- TOC entry 60 (OID 1358590)
-- Name: tiposiva_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tiposiva
    ADD CONSTRAINT tiposiva_pkey PRIMARY KEY (idtipoiva);


--
-- TOC entry 62 (OID 1358592)
-- Name: grupo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY grupo
    ADD CONSTRAINT grupo_pkey PRIMARY KEY (idgrupo);


--
-- TOC entry 63 (OID 1358594)
-- Name: cuenta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cuenta
    ADD CONSTRAINT cuenta_pkey PRIMARY KEY (idcuenta);


--
-- TOC entry 64 (OID 1358596)
-- Name: canal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY canal
    ADD CONSTRAINT canal_pkey PRIMARY KEY (idcanal);


--
-- TOC entry 65 (OID 1358598)
-- Name: c_coste_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY c_coste
    ADD CONSTRAINT c_coste_pkey PRIMARY KEY (idc_coste);


--
-- TOC entry 66 (OID 1358600)
-- Name: acumulado_c_coste_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acumulado_c_coste
    ADD CONSTRAINT acumulado_c_coste_pkey PRIMARY KEY (idacumulado_c_coste);


--
-- TOC entry 67 (OID 1358602)
-- Name: acumulado_canal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acumulado_canal
    ADD CONSTRAINT acumulado_canal_pkey PRIMARY KEY (idacumulado_canal);


--
-- TOC entry 68 (OID 1358604)
-- Name: diario_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY diario
    ADD CONSTRAINT diario_pkey PRIMARY KEY (iddiario);


--
-- TOC entry 69 (OID 1358606)
-- Name: asiento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY asiento
    ADD CONSTRAINT asiento_pkey PRIMARY KEY (idasiento);


--
-- TOC entry 70 (OID 1358608)
-- Name: apunte_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY apunte
    ADD CONSTRAINT apunte_pkey PRIMARY KEY (idapunte);


--
-- TOC entry 71 (OID 1358610)
-- Name: borrador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY borrador
    ADD CONSTRAINT borrador_pkey PRIMARY KEY (idborrador);


--
-- TOC entry 77 (OID 1358612)
-- Name: pga_graphs_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pga_graphs
    ADD CONSTRAINT pga_graphs_pkey PRIMARY KEY (graphname);


--
-- TOC entry 78 (OID 1358614)
-- Name: pga_images_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pga_images
    ADD CONSTRAINT pga_images_pkey PRIMARY KEY (imagename);


--
-- TOC entry 79 (OID 1358616)
-- Name: pga_diagrams_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pga_diagrams
    ADD CONSTRAINT pga_diagrams_pkey PRIMARY KEY (diagramname);


--
-- TOC entry 80 (OID 1358618)
-- Name: pga_layout_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pga_layout
    ADD CONSTRAINT pga_layout_pkey PRIMARY KEY (tablename);


--
-- TOC entry 81 (OID 1358620)
-- Name: amortizacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY amortizacion
    ADD CONSTRAINT amortizacion_pkey PRIMARY KEY (idamortizacion);


--
-- TOC entry 82 (OID 1358622)
-- Name: linamortizacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY linamortizacion
    ADD CONSTRAINT linamortizacion_pkey PRIMARY KEY (idlinamortizacion);


--
-- TOC entry 117 (OID 1358624)
-- Name: amortizacion_cuenta_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY amortizacion
    ADD CONSTRAINT amortizacion_cuenta_fk FOREIGN KEY (idcuentaactivo) REFERENCES cuenta(idcuenta);


--
-- TOC entry 118 (OID 1358628)
-- Name: amortizacion_cuentaamort_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY amortizacion
    ADD CONSTRAINT amortizacion_cuentaamort_fk FOREIGN KEY (idcuentaamortizacion) REFERENCES cuenta(idcuenta);


--
-- TOC entry 119 (OID 1358632)
-- Name: linamoritzacion_amortizacion_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY linamortizacion
    ADD CONSTRAINT linamoritzacion_amortizacion_fk FOREIGN KEY (idamortizacion) REFERENCES amortizacion(idamortizacion);


--
-- TOC entry 120 (OID 1358636)
-- Name: linamortizacion_asiento_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY linamortizacion
    ADD CONSTRAINT linamortizacion_asiento_fk FOREIGN KEY (idasiento) REFERENCES asiento(idasiento);


--
-- TOC entry 179 (OID 1358640)
-- Name: RI_ConstraintTrigger_1358640; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER idtipoiva_tipoiva_fk
    AFTER INSERT OR UPDATE ON apunte
    FROM tiposiva
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('idtipoiva_tipoiva_fk', 'apunte', 'tiposiva', 'UNSPECIFIED', 'idtipoiva', 'idtipoiva');


--
-- TOC entry 121 (OID 1358641)
-- Name: RI_ConstraintTrigger_1358641; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER idtipoiva_tipoiva_fk
    AFTER DELETE ON tiposiva
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('idtipoiva_tipoiva_fk', 'apunte', 'tiposiva', 'UNSPECIFIED', 'idtipoiva', 'idtipoiva');


--
-- TOC entry 122 (OID 1358642)
-- Name: RI_ConstraintTrigger_1358642; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER idtipoiva_tipoiva_fk
    AFTER UPDATE ON tiposiva
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('idtipoiva_tipoiva_fk', 'apunte', 'tiposiva', 'UNSPECIFIED', 'idtipoiva', 'idtipoiva');


--
-- TOC entry 189 (OID 1358643)
-- Name: RI_ConstraintTrigger_1358643; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER idtipoivaborr_tipoiva_fk
    AFTER INSERT OR UPDATE ON borrador
    FROM tiposiva
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('idtipoivaborr_tipoiva_fk', 'borrador', 'tiposiva', 'UNSPECIFIED', 'idtipoiva', 'idtipoiva');


--
-- TOC entry 123 (OID 1358644)
-- Name: RI_ConstraintTrigger_1358644; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER idtipoivaborr_tipoiva_fk
    AFTER DELETE ON tiposiva
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('idtipoivaborr_tipoiva_fk', 'borrador', 'tiposiva', 'UNSPECIFIED', 'idtipoiva', 'idtipoiva');


--
-- TOC entry 124 (OID 1358645)
-- Name: RI_ConstraintTrigger_1358645; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER idtipoivaborr_tipoiva_fk
    AFTER UPDATE ON tiposiva
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('idtipoivaborr_tipoiva_fk', 'borrador', 'tiposiva', 'UNSPECIFIED', 'idtipoiva', 'idtipoiva');


--
-- TOC entry 127 (OID 1358646)
-- Name: RI_ConstraintTrigger_1358646; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER cuenta_padre_fk
    AFTER INSERT OR UPDATE ON cuenta
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('cuenta_padre_fk', 'cuenta', 'cuenta', 'UNSPECIFIED', 'padre', 'idcuenta');


--
-- TOC entry 128 (OID 1358647)
-- Name: RI_ConstraintTrigger_1358647; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER cuenta_padre_fk
    AFTER DELETE ON cuenta
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('cuenta_padre_fk', 'cuenta', 'cuenta', 'UNSPECIFIED', 'padre', 'idcuenta');


--
-- TOC entry 129 (OID 1358648)
-- Name: RI_ConstraintTrigger_1358648; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER cuenta_padre_fk
    AFTER UPDATE ON cuenta
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('cuenta_padre_fk', 'cuenta', 'cuenta', 'UNSPECIFIED', 'padre', 'idcuenta');


--
-- TOC entry 130 (OID 1358649)
-- Name: RI_ConstraintTrigger_1358649; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER cuenta_idgrupo_fk
    AFTER INSERT OR UPDATE ON cuenta
    FROM grupo
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('cuenta_idgrupo_fk', 'cuenta', 'grupo', 'UNSPECIFIED', 'idgrupo', 'idgrupo');


--
-- TOC entry 125 (OID 1358650)
-- Name: RI_ConstraintTrigger_1358650; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER cuenta_idgrupo_fk
    AFTER DELETE ON grupo
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('cuenta_idgrupo_fk', 'cuenta', 'grupo', 'UNSPECIFIED', 'idgrupo', 'idgrupo');


--
-- TOC entry 126 (OID 1358651)
-- Name: RI_ConstraintTrigger_1358651; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER cuenta_idgrupo_fk
    AFTER UPDATE ON grupo
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('cuenta_idgrupo_fk', 'cuenta', 'grupo', 'UNSPECIFIED', 'idgrupo', 'idgrupo');


--
-- TOC entry 154 (OID 1358652)
-- Name: RI_ConstraintTrigger_1358652; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER c_coste_fk
    AFTER INSERT OR UPDATE ON c_coste
    FROM c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('c_coste_fk', 'c_coste', 'c_coste', 'UNSPECIFIED', 'padre', 'idc_coste');


--
-- TOC entry 155 (OID 1358653)
-- Name: RI_ConstraintTrigger_1358653; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER c_coste_fk
    AFTER DELETE ON c_coste
    FROM c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('c_coste_fk', 'c_coste', 'c_coste', 'UNSPECIFIED', 'padre', 'idc_coste');


--
-- TOC entry 156 (OID 1358654)
-- Name: RI_ConstraintTrigger_1358654; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER c_coste_fk
    AFTER UPDATE ON c_coste
    FROM c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('c_coste_fk', 'c_coste', 'c_coste', 'UNSPECIFIED', 'padre', 'idc_coste');


--
-- TOC entry 166 (OID 1358655)
-- Name: RI_ConstraintTrigger_1358655; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_c_coste_idcuenta_fk
    AFTER INSERT OR UPDATE ON acumulado_c_coste
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('acumulado_c_coste_idcuenta_fk', 'acumulado_c_coste', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 131 (OID 1358656)
-- Name: RI_ConstraintTrigger_1358656; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_c_coste_idcuenta_fk
    AFTER DELETE ON cuenta
    FROM acumulado_c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('acumulado_c_coste_idcuenta_fk', 'acumulado_c_coste', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 132 (OID 1358657)
-- Name: RI_ConstraintTrigger_1358657; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_c_coste_idcuenta_fk
    AFTER UPDATE ON cuenta
    FROM acumulado_c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('acumulado_c_coste_idcuenta_fk', 'acumulado_c_coste', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 167 (OID 1358658)
-- Name: RI_ConstraintTrigger_1358658; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_c_coste_idc_coste_fk
    AFTER INSERT OR UPDATE ON acumulado_c_coste
    FROM c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('acumulado_c_coste_idc_coste_fk', 'acumulado_c_coste', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 157 (OID 1358659)
-- Name: RI_ConstraintTrigger_1358659; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_c_coste_idc_coste_fk
    AFTER DELETE ON c_coste
    FROM acumulado_c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('acumulado_c_coste_idc_coste_fk', 'acumulado_c_coste', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 158 (OID 1358660)
-- Name: RI_ConstraintTrigger_1358660; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_c_coste_idc_coste_fk
    AFTER UPDATE ON c_coste
    FROM acumulado_c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('acumulado_c_coste_idc_coste_fk', 'acumulado_c_coste', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 168 (OID 1358661)
-- Name: RI_ConstraintTrigger_1358661; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_idcuenta_fk
    AFTER INSERT OR UPDATE ON acumulado_canal
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('acumulado_idcuenta_fk', 'acumulado_canal', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 133 (OID 1358662)
-- Name: RI_ConstraintTrigger_1358662; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_idcuenta_fk
    AFTER DELETE ON cuenta
    FROM acumulado_canal
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('acumulado_idcuenta_fk', 'acumulado_canal', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 134 (OID 1358663)
-- Name: RI_ConstraintTrigger_1358663; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_idcuenta_fk
    AFTER UPDATE ON cuenta
    FROM acumulado_canal
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('acumulado_idcuenta_fk', 'acumulado_canal', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 169 (OID 1358664)
-- Name: RI_ConstraintTrigger_1358664; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_idcanal_fk
    AFTER INSERT OR UPDATE ON acumulado_canal
    FROM canal
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('acumulado_idcanal_fk', 'acumulado_canal', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 146 (OID 1358665)
-- Name: RI_ConstraintTrigger_1358665; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_idcanal_fk
    AFTER DELETE ON canal
    FROM acumulado_canal
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('acumulado_idcanal_fk', 'acumulado_canal', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 147 (OID 1358666)
-- Name: RI_ConstraintTrigger_1358666; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER acumulado_idcanal_fk
    AFTER UPDATE ON canal
    FROM acumulado_canal
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('acumulado_idcanal_fk', 'acumulado_canal', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 180 (OID 1358667)
-- Name: RI_ConstraintTrigger_1358667; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idasiento_fk
    AFTER INSERT OR UPDATE ON apunte
    FROM asiento
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('apunte_idasiento_fk', 'apunte', 'asiento', 'UNSPECIFIED', 'idasiento', 'idasiento');


--
-- TOC entry 175 (OID 1358668)
-- Name: RI_ConstraintTrigger_1358668; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idasiento_fk
    AFTER DELETE ON asiento
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('apunte_idasiento_fk', 'apunte', 'asiento', 'UNSPECIFIED', 'idasiento', 'idasiento');


--
-- TOC entry 176 (OID 1358669)
-- Name: RI_ConstraintTrigger_1358669; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idasiento_fk
    AFTER UPDATE ON asiento
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('apunte_idasiento_fk', 'apunte', 'asiento', 'UNSPECIFIED', 'idasiento', 'idasiento');


--
-- TOC entry 181 (OID 1358670)
-- Name: RI_ConstraintTrigger_1358670; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_iddiario_fk
    AFTER INSERT OR UPDATE ON apunte
    FROM diario
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('apunte_iddiario_fk', 'apunte', 'diario', 'UNSPECIFIED', 'iddiario', 'iddiario');


--
-- TOC entry 171 (OID 1358671)
-- Name: RI_ConstraintTrigger_1358671; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_iddiario_fk
    AFTER DELETE ON diario
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('apunte_iddiario_fk', 'apunte', 'diario', 'UNSPECIFIED', 'iddiario', 'iddiario');


--
-- TOC entry 172 (OID 1358672)
-- Name: RI_ConstraintTrigger_1358672; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_iddiario_fk
    AFTER UPDATE ON diario
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('apunte_iddiario_fk', 'apunte', 'diario', 'UNSPECIFIED', 'iddiario', 'iddiario');


--
-- TOC entry 182 (OID 1358673)
-- Name: RI_ConstraintTrigger_1358673; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idcuenta_fk
    AFTER INSERT OR UPDATE ON apunte
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('apunte_idcuenta_fk', 'apunte', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 135 (OID 1358674)
-- Name: RI_ConstraintTrigger_1358674; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idcuenta_fk
    AFTER DELETE ON cuenta
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('apunte_idcuenta_fk', 'apunte', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 136 (OID 1358675)
-- Name: RI_ConstraintTrigger_1358675; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idcuenta_fk
    AFTER UPDATE ON cuenta
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('apunte_idcuenta_fk', 'apunte', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 183 (OID 1358676)
-- Name: RI_ConstraintTrigger_1358676; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_contrapartida_fk
    AFTER INSERT OR UPDATE ON apunte
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('apunte_contrapartida_fk', 'apunte', 'cuenta', 'UNSPECIFIED', 'contrapartida', 'idcuenta');


--
-- TOC entry 137 (OID 1358677)
-- Name: RI_ConstraintTrigger_1358677; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_contrapartida_fk
    AFTER DELETE ON cuenta
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('apunte_contrapartida_fk', 'apunte', 'cuenta', 'UNSPECIFIED', 'contrapartida', 'idcuenta');


--
-- TOC entry 138 (OID 1358678)
-- Name: RI_ConstraintTrigger_1358678; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_contrapartida_fk
    AFTER UPDATE ON cuenta
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('apunte_contrapartida_fk', 'apunte', 'cuenta', 'UNSPECIFIED', 'contrapartida', 'idcuenta');


--
-- TOC entry 184 (OID 1358679)
-- Name: RI_ConstraintTrigger_1358679; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idcanal_fk
    AFTER INSERT OR UPDATE ON apunte
    FROM canal
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('apunte_idcanal_fk', 'apunte', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 148 (OID 1358680)
-- Name: RI_ConstraintTrigger_1358680; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idcanal_fk
    AFTER DELETE ON canal
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('apunte_idcanal_fk', 'apunte', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 149 (OID 1358681)
-- Name: RI_ConstraintTrigger_1358681; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idcanal_fk
    AFTER UPDATE ON canal
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('apunte_idcanal_fk', 'apunte', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 185 (OID 1358682)
-- Name: RI_ConstraintTrigger_1358682; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idc_coste_fk
    AFTER INSERT OR UPDATE ON apunte
    FROM c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('apunte_idc_coste_fk', 'apunte', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 159 (OID 1358683)
-- Name: RI_ConstraintTrigger_1358683; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idc_coste_fk
    AFTER DELETE ON c_coste
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('apunte_idc_coste_fk', 'apunte', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 160 (OID 1358684)
-- Name: RI_ConstraintTrigger_1358684; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER apunte_idc_coste_fk
    AFTER UPDATE ON c_coste
    FROM apunte
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('apunte_idc_coste_fk', 'apunte', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 190 (OID 1358685)
-- Name: RI_ConstraintTrigger_1358685; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idasiento_fk
    AFTER INSERT OR UPDATE ON borrador
    FROM asiento
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('borrador_idasiento_fk', 'borrador', 'asiento', 'UNSPECIFIED', 'idasiento', 'idasiento');


--
-- TOC entry 177 (OID 1358686)
-- Name: RI_ConstraintTrigger_1358686; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idasiento_fk
    AFTER DELETE ON asiento
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('borrador_idasiento_fk', 'borrador', 'asiento', 'UNSPECIFIED', 'idasiento', 'idasiento');


--
-- TOC entry 178 (OID 1358687)
-- Name: RI_ConstraintTrigger_1358687; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idasiento_fk
    AFTER UPDATE ON asiento
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('borrador_idasiento_fk', 'borrador', 'asiento', 'UNSPECIFIED', 'idasiento', 'idasiento');


--
-- TOC entry 191 (OID 1358688)
-- Name: RI_ConstraintTrigger_1358688; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_iddiario_fk
    AFTER INSERT OR UPDATE ON borrador
    FROM diario
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('borrador_iddiario_fk', 'borrador', 'diario', 'UNSPECIFIED', 'iddiario', 'iddiario');


--
-- TOC entry 173 (OID 1358689)
-- Name: RI_ConstraintTrigger_1358689; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_iddiario_fk
    AFTER DELETE ON diario
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('borrador_iddiario_fk', 'borrador', 'diario', 'UNSPECIFIED', 'iddiario', 'iddiario');


--
-- TOC entry 174 (OID 1358690)
-- Name: RI_ConstraintTrigger_1358690; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_iddiario_fk
    AFTER UPDATE ON diario
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('borrador_iddiario_fk', 'borrador', 'diario', 'UNSPECIFIED', 'iddiario', 'iddiario');


--
-- TOC entry 192 (OID 1358691)
-- Name: RI_ConstraintTrigger_1358691; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idcuenta_fk
    AFTER INSERT OR UPDATE ON borrador
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('borrador_idcuenta_fk', 'borrador', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 139 (OID 1358692)
-- Name: RI_ConstraintTrigger_1358692; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idcuenta_fk
    AFTER DELETE ON cuenta
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('borrador_idcuenta_fk', 'borrador', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 140 (OID 1358693)
-- Name: RI_ConstraintTrigger_1358693; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idcuenta_fk
    AFTER UPDATE ON cuenta
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('borrador_idcuenta_fk', 'borrador', 'cuenta', 'UNSPECIFIED', 'idcuenta', 'idcuenta');


--
-- TOC entry 193 (OID 1358694)
-- Name: RI_ConstraintTrigger_1358694; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_contrapartida_fk
    AFTER INSERT OR UPDATE ON borrador
    FROM cuenta
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('borrador_contrapartida_fk', 'borrador', 'cuenta', 'UNSPECIFIED', 'contrapartida', 'idcuenta');


--
-- TOC entry 141 (OID 1358695)
-- Name: RI_ConstraintTrigger_1358695; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_contrapartida_fk
    AFTER DELETE ON cuenta
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('borrador_contrapartida_fk', 'borrador', 'cuenta', 'UNSPECIFIED', 'contrapartida', 'idcuenta');


--
-- TOC entry 142 (OID 1358696)
-- Name: RI_ConstraintTrigger_1358696; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_contrapartida_fk
    AFTER UPDATE ON cuenta
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('borrador_contrapartida_fk', 'borrador', 'cuenta', 'UNSPECIFIED', 'contrapartida', 'idcuenta');


--
-- TOC entry 194 (OID 1358697)
-- Name: RI_ConstraintTrigger_1358697; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_canal_fk
    AFTER INSERT OR UPDATE ON borrador
    FROM canal
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('borrador_canal_fk', 'borrador', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 150 (OID 1358698)
-- Name: RI_ConstraintTrigger_1358698; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_canal_fk
    AFTER DELETE ON canal
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('borrador_canal_fk', 'borrador', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 151 (OID 1358699)
-- Name: RI_ConstraintTrigger_1358699; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_canal_fk
    AFTER UPDATE ON canal
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('borrador_canal_fk', 'borrador', 'canal', 'UNSPECIFIED', 'idcanal', 'idcanal');


--
-- TOC entry 195 (OID 1358700)
-- Name: RI_ConstraintTrigger_1358700; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idc_coste_fk
    AFTER INSERT OR UPDATE ON borrador
    FROM c_coste
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_check_ins"('borrador_idc_coste_fk', 'borrador', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 161 (OID 1358701)
-- Name: RI_ConstraintTrigger_1358701; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idc_coste_fk
    AFTER DELETE ON c_coste
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('borrador_idc_coste_fk', 'borrador', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 162 (OID 1358702)
-- Name: RI_ConstraintTrigger_1358702; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE CONSTRAINT TRIGGER borrador_idc_coste_fk
    AFTER UPDATE ON c_coste
    FROM borrador
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('borrador_idc_coste_fk', 'borrador', 'c_coste', 'UNSPECIFIED', 'idc_coste', 'idc_coste');


--
-- TOC entry 186 (OID 1358703)
-- Name: nuevo_apunte; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER nuevo_apunte
    AFTER INSERT OR UPDATE ON apunte
    FOR EACH ROW
    EXECUTE PROCEDURE aumenta_valor();


--
-- TOC entry 187 (OID 1358704)
-- Name: nuevo_apunte1; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER nuevo_apunte1
    BEFORE UPDATE ON apunte
    FOR EACH ROW
    EXECUTE PROCEDURE disminuye_valor();


--
-- TOC entry 188 (OID 1358705)
-- Name: nuevo_apunte2; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER nuevo_apunte2
    BEFORE DELETE ON apunte
    FOR EACH ROW
    EXECUTE PROCEDURE disminuye_valor1();


--
-- TOC entry 144 (OID 1358706)
-- Name: nueva_cuenta; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER nueva_cuenta
    AFTER INSERT ON cuenta
    FOR EACH ROW
    EXECUTE PROCEDURE creacuenta();


--
-- TOC entry 143 (OID 1358707)
-- Name: borra_cuenta; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER borra_cuenta
    BEFORE DELETE ON cuenta
    FOR EACH ROW
    EXECUTE PROCEDURE borracuenta();


--
-- TOC entry 153 (OID 1358708)
-- Name: nuevo_canal; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER nuevo_canal
    AFTER INSERT ON canal
    FOR EACH ROW
    EXECUTE PROCEDURE creacanal();


--
-- TOC entry 152 (OID 1358709)
-- Name: borra_canal; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER borra_canal
    BEFORE DELETE ON canal
    FOR EACH ROW
    EXECUTE PROCEDURE borracanal();


--
-- TOC entry 164 (OID 1358710)
-- Name: nuevo_ccoste; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER nuevo_ccoste
    AFTER INSERT ON c_coste
    FOR EACH ROW
    EXECUTE PROCEDURE creaccoste();


--
-- TOC entry 163 (OID 1358711)
-- Name: borra_ccoste; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER borra_ccoste
    BEFORE DELETE ON c_coste
    FOR EACH ROW
    EXECUTE PROCEDURE borraccoste();


--
-- TOC entry 145 (OID 1358712)
-- Name: propaga_acumulado_cuenta; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER propaga_acumulado_cuenta
    AFTER UPDATE ON cuenta
    FOR EACH ROW
    EXECUTE PROCEDURE propagaacumuladocuenta();


--
-- TOC entry 165 (OID 1358713)
-- Name: propaga_acumulado_ccoste; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER propaga_acumulado_ccoste
    AFTER UPDATE ON c_coste
    FOR EACH ROW
    EXECUTE PROCEDURE propagaacumuladoccoste();


--
-- TOC entry 170 (OID 1358714)
-- Name: acumulados_canal_fk; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER acumulados_canal_fk
    AFTER UPDATE ON acumulado_canal
    FOR EACH ROW
    EXECUTE PROCEDURE acumulados_canal();


--
-- TOC entry 3 (OID 2200)
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


