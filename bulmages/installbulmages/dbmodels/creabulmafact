#!/bin/bash
#  (C) Tomeu Borr� Riera, Octubre 2004
# Lo ejecuta un usuario con privilegios para crear bases de datos. Si no no funciona.
#
# Este script se encarga de crear bases de datos de bulmages.
# para ello precisa de dos parametros (el nombre de la base de datos a crear y el tipo de base de datos que ser�
# Este script no se encarga de hacer las inserciones oportunas en la metabd.
# Aunque es una tarea muy sencilla que puede hacer posteriormente.
# PARAMETROS:
#		$1 Tipo: Texto o dialogo
#               $2 Nombre Base de Datos
#               $3 Tipo:  0.- Base (Vacia)
#			  1.- Plan Contable.
#			  2.- Juego de prueba de bulmafact
#		$4 Nombre de la Empresa
#
# La diferencia entre este script y el anterior es que este no hace falta que se ejecute como ROOT
# ------------------------------------------------------------------------------------------------


#Buscamos el parametro para saber si es texto o no
if [ "$1" = "--texto" ]; then
  texto="1"
  ptexto="--texto"
else
  texto="0"
  ptexto="--dialog"
fi


function mensaje() {
   if [ ! -e /usr/bin/dialog -o $texto = 1 ]; then
      echo -e "$1"
   else
      dialog --title "Creacion Base de Datos" --backtitle "Asociacion Iglues" --msgbox "$1" 15 60
   fi
}


function info() {
   if [ ! -e /usr/bin/dialog -o $texto = 1 ]; then
      echo -e "$1"
   else
      dialog  --title "Creacion Base de Datos" --backtitle "Asociacion Iglues" --infobox "$1" 10 60
   fi
}

function tiempo {
  sleep 1.5
}

function linea {
   if [ ! -e /usr/bin/dialog ]; then
     echo -e "\033[32m----------------------------------------------\033[0m\n"
   fi
}

rm /tmp/errores1.txt
touch /tmp/errores1.txt


#Nos situamos en el directorio correcto.
cd /usr/share/bulmages/dbmodels


info "Creamos la base de datos:$2 $3"
linea
tiempo

dropdb  $2 2>> /tmp/error.txt > /dev/null
# La creación de bases de datos con unicode da muchos problemas con los caracteres especiales.
#createdb -E UNICODE $2 2>> /tmp/errores1.txt > /dev/null
createdb -E SQL_ASCII $2 2>> /tmp/errores1.txt > /dev/null

# Creamos la base
if [ "$3" = "1" -o "$3" = "2" ]; then
   info "Importamos el esquema de base de datos de una empresa. \n"
   tiempo
   psql $2 < crear/bulmafact/bulmafact_schema.sql 2>> /tmp/errores1.txt > /dev/null
else
   info "Importamos el esquema de la metabd. \n"
   tiempo
   psql $2 < crear/metabd/metabd_schema.pgdump 2>> /tmp/errores1.txt > /dev/null
fi


#if [ "$3" = "3" ]; then
   # Cargamos la metabase
#   info "Cargamos la metabase. \n"
#   tiempo
#   psql $2 < crear/metabd/metabd_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#fi


if [ "$3" = "1" -o "$3" = "2" ]; then
   # Cargamos lo minimo
   info "Cargamos el conjunto minimo de datos. \n"
   tiempo
   psql $2 < crear/bulmafact/bulmafact_data.sql 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_configuracion_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_tiposiva_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_grupo_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_cuenta_data.pgdump 2>> /tmp/errores1.txt > /dev/null
fi


if [ "$3" = "2" ]; then
   # Cargamos todas las tablas que son de ejemplo.
   info "Cargamos datos adicionales. \n"
   tiempo
#   psql $2 < crear/bulmafact/t_canal_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_c_coste_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_diario_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_asiento_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_apunte_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_borrador_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_registroiva_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_ainteligente_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_binteligente_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_ivainteligente_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_compmasap_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_compbalance_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_balance_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_amortizacion_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_linamortizacion_data.pgdump 2>> /tmp/errores1.txt > /dev/null
#   psql $2 < crear/bulmafact/t_ejercicios_data.pgdump 2>> /tmp/errores1.txt > /dev/null
fi


#VAmos a hacer la insercion en la metabase de los datos necesarios.
#if [ "$3" = "1" -o "$3" = "2" ]; then
   # Cargamos lo minimo
#   info "Creamos la empresa en la MetaBase. \n"
#   tiempo
#   echo -e " INSERT INTO empresafact (nombre, ano, nombredb) VALUES ('$4', $5, '$2')" | psql $6 2>> /tmp/errores1.txt   > /dev/null
   #  Hacemos una actualizacion de las bases de datos.
#   echo -e "\\pset tuples_only \n select MAX(idempresafact) from empresafact ;" | psql metabd > /tmp/listdb.lst
#   for x in `tail +2 /tmp/listdb.lst`
#   do
#      info "Creamos los permisos necesarios. \n"
#      tiempo
#      echo -e "\\pset tuples_only \n select idusuario FROM usuario ;" | psql metabd > /tmp/listuser.lst
#      for y in `tail +2 /tmp/listuser.lst`
#      do
#	    echo "INSERT INTO usuario_empresafact (idusuario,idempresafact, permisos) VALUES ($y, $x, 1)" | psql $6   2>> /tmp/errores1.txt >> /tmp/errores1.txt
#	    info "Damos permisos a $y, $x. \n"
#      done
#      linea
#   done
#fi

DBS=`cat /tmp/errores1.txt | grep ERROR`
if [ "$DBS" ]; then
   mensaje "Se han producido errores al instalar la base de datos $2 \n Se abortar�la instalacion. Para mas informacion consulte en bulmages@bulma.net. \n$DBS"
   dropdb $2
   exit 1
else
   info "La instalacion de la base de datos $2 ha sido un exito. \n"
    rm /tmp/errores1.txt
    rm /tmp/error.txt
fi