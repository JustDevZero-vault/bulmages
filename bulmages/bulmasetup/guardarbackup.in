# -*- coding: utf-8 -*-

import sys
import os
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from guardarbackupbase import *
from empresa import Empresa
from config import *
import functions
# Libreria de acceso a bases de datos PostgreSQL
import psycopg2

class GuardarBackup(Ui_GuardarBackup, Empresa):

    def __init__(self, parent = None):
        Empresa.__init__(self,parent)
        self.setupUi(self)
        self.proceso = QtCore.QProcess()
        self.initListaEmpresas()

    def initListaEmpresas(self):

        self.conectar('template1')
        self.databases = self.execute("SELECT datname FROM pg_database ORDER BY datname")
        self.desconectar()

        self.lista_empresas.setRowCount(0)
        self.i = 0
        for row in self.databases:
            if (str(row[0]) != 'template0' and str(row[0]) != 'template1' ):
                self.lista_empresas.hideRow(self.i)
                self.conectar(row[0])
                existconf = self.executeone('SELECT * FROM pg_tables where tablename =\'configuracion\'')
                if (existconf != None):
                    tipo = self.executeone('SELECT valor FROM configuracion where nombre =\'Tipo\'')
                    nombre = self.executeone('SELECT valor FROM configuracion where nombre =\'NombreEmpresa\'')
		    if nombre != None:
			self.lista_empresas.setRowCount(self.lista_empresas.rowCount() + 1)
			self.lista_empresas.setItem(self.i, 0 , QTableWidgetItem(str(nombre[0]).decode('string-escape').decode("utf-8")))
			self.lista_empresas.setItem(self.i, 1 , QTableWidgetItem(row[0]))
			self.lista_empresas.setItem(self.i, 2 , QTableWidgetItem(str(tipo[0])))
			self.lista_empresas.showRow(self.i)
			self.i = self.i + 1
                self.desconectar()
        self.lista_empresas.resizeColumnsToContents()

    def on_guardar_backup_released(self):

        # Pasamos el nombre de la base de datos seleccionada en listWidget a la variable database
        i = 0
        while (i < self.lista_empresas.rowCount()):
            if self.lista_empresas.item(i,1).isSelected():
                self.database = self.lista_empresas.item(i,1).text()
                break
            i = i + 1

        self.directorio = QFileDialog.getExistingDirectory(self, QtGui.QApplication.translate("GuardarBackup","Selecciona la carpeta de destino del Backup", None, QtGui.QApplication.UnicodeUTF8),"@HOME_DIR@")
        destination=str(self.directorio + '/' + self.database + '.tar.gz')
        self.command = functions.pg_dump + ' -f ' + plugins.configfiles + self.database + '.sql ' + self.database
        self.proceso.start(self.command)
        self.proceso.waitForFinished(-1)

        self.conffact = 'bulmafact_' + self.database + '.conf'
        self.conftpv = 'bulmatpv_' + self.database + '.conf'
        self.confcont = 'bulmacont_' + self.database + '.conf'
        self.quehehecho = 0

        Yes = 'Ok'
        error = QtGui.QMessageBox(self)
        error.setWindowTitle('Error')
        error.setIcon(QtGui.QMessageBox.Warning)
        error.addButton(Yes, QtGui.QMessageBox.AcceptRole)

        if (self.lista_empresas.item(i,2).text() == QString('BulmaFact')):
            self.quehehecho = 1
            if os.path.exists(plugins.configfiles + self.conffact):
                self.quehehecho = 1
            else:
                error.setText(QtGui.QApplication.translate("GuardarBackup",'No existe el archivo de configuracion: <b>' + plugins.configfiles, None, QtGui.QApplication.UnicodeUTF8) + self.conffact + '</b>')
                error.exec_()
            if os.path.exists(plugins.configfiles + self.conftpv):
                self.quehehecho = 2
        elif (self.lista_empresas.item(i,2).text() == QString('BulmaCont')):
            self.quehehecho = 3
            if os.path.exists(plugins.configfiles + self.confcont):
                self.quehehecho = 3
            else:
                error.setText(QtGui.QApplication.translate("GuardarBackup",'No existe el archivo de configuracion: <b>' + plugins.configfiles, None, QtGui.QApplication.UnicodeUTF8) + self.confcont + '</b>')
                error.exec_()

        if self.quehehecho == 1:
            files=[str('@BULMAGES_CONFIG_DIR@/' + self.conffact), str(plugins.configfiles + self.database + '.sql')]
            functions.multios().compress(files,destination)
        if self.quehehecho == 2:
            files=[str('@BULMAGES_CONFIG_DIR@/' + self.conffact), str(plugins.configfiles + self.conftpv), str('@BULMAGES_CONFIG_DIR@/' + self.database + '.sql')]
            functions.multios().compress(files,destination)
        if self.quehehecho == 3:
            files=[str('@BULMAGES_CONFIG_DIR@/' + self.confcont), str(plugins.configfiles + self.database + '.sql')]
            functions.multios().compress(files,destination)

        os.remove(str('@BULMAGES_CONFIG_DIR@/' + self.database + '.sql'))

        Yes = 'Ok'
        yasta = QtGui.QMessageBox(self)
        yasta.setWindowTitle('Guardar Backup')
        yasta.setIcon(QtGui.QMessageBox.Information)
        yasta.addButton(Yes, QtGui.QMessageBox.AcceptRole)
        yasta.setText(QtGui.QApplication.translate("GuardarBackup",'<b>Backup guardado satisfactoriamente en : ', None, QtGui.QApplication.UnicodeUTF8) + self.directorio + '</b>')
        yasta.exec_()

        self.accept()

def main(args):
    app=QtGui.QApplication(args)
    win=GuardarBackup()
    win.exec_()
    sys.exit(app.exec_())

if __name__=="__main__":
    main(sys.argv)
